Write an SQL query to report the statistics of the league. The statistics should be built using the played matches where the winning team gets three points and the losing team gets no points. If a match ends with a draw, both teams get one point.

Each row of the result table should contain:

team_name - The name of the team in the Teams table.
matches_played - The number of matches played as either a home or away team.
points - The total points the team has so far.
goal_for - The total number of goals scored by the team across all matches.
goal_against - The total number of goals scored by opponent teams against this team across all matches.
goal_diff - The result of goal_for - goal_against.
Return the result table in descending order by points. If two or more teams have the same points, order them in descending order by goal_diff. If there is still a tie, order them by team_name in lexicographical order.

The query result format is in the following example:

 

Teams table:
+---------+-----------+
| team_id | team_name |
+---------+-----------+
| 1       | Ajax      |
| 4       | Dortmund  |
| 6       | Arsenal   |
+---------+-----------+

Matches table:
+--------------+--------------+-----------------+-----------------+
| home_team_id | away_team_id | home_team_goals | away_team_goals |
+--------------+--------------+-----------------+-----------------+
| 1            | 4            | 0               | 1               |
| 1            | 6            | 3               | 3               |
| 4            | 1            | 5               | 2               |
| 6            | 1            | 0               | 0               |
+--------------+--------------+-----------------+-----------------+


Result table:
+-----------+----------------+--------+----------+--------------+-----------+
| team_name | matches_played | points | goal_for | goal_against | goal_diff |
+-----------+----------------+--------+----------+--------------+-----------+
| Dortmund  | 2              | 6      | 6        | 2            | 4         |
| Arsenal   | 2              | 2      | 3        | 3            | 0         |
| Ajax      | 4              | 2      | 5        | 9            | -4        |
+-----------+----------------+--------+----------+--------------+-----------+

Ajax (team_id=1) played 4 matches: 2 losses and 2 draws. Total points = 0 + 0 + 1 + 1 = 2.
Dortmund (team_id=4) played 2 matches: 2 wins. Total points = 3 + 3 = 6.
Arsenal (team_id=6) played 2 matches: 2 draws. Total points = 1 + 1 = 2.
Dortmund is the first team in the table. Ajax and Arsenal have the same points, but since Arsenal has a higher goal_diff than Ajax, Arsenal comes before Ajax in the table.


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/league-statistics



+-----------+----------------+--------+----------+--------------+-----------+-----------+------------


# Write your MySQL query statement below

#winning team gets three points and the losing team gets no points. If a match ends with a draw, both teams get one point.

# home_team_goals > away_team_goals --> 3分
# home_team_goals = away_team_goals --> 各1分
# home_team_goals < away_team_goals --> 0分

# home, away 兩個應該合成一col --> 用union

with t as (
    Select * from Matches 
    UNION ALL
    Select away_team_id,home_team_id,away_team_goals,
    home_team_goals
    from Matches
)

select team_name, 
    COUNT(t.home_team_id) as matches_played,
    SUM(CASE WHEN home_team_goals > away_team_goals THEN 3
    WHEN home_team_goals = away_team_goals THEN 1
    ELSE 0 END) points,
    SUM(home_team_goals) as goal_for,
    SUM(away_team_goals) as goal_against,
    SUM(home_team_goals) - SUM(away_team_goals) as goal_diff
    FROM t
    INNER JOIN Teams t2 ON t.home_team_id = t2.team_id
    GROUP BY home_team_id   
    ORDER BY points desc, goal_diff desc, team_name
    
    
