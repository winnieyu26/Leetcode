512. Game Play Analysis II
Table: Activity

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key of this table.
This table shows the activity of players of some game.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on some day using some device.
 

Write a SQL query that reports the device that is first logged in for each player.

The query result format is in the following example:

Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-05-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+

Result table:
+-----------+-----------+
| player_id | device_id |
+-----------+-----------+
| 1         | 2         |
| 2         | 3         |
| 3         | 1         |
+-----------+-----------+

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/game-play-analysis-ii



----------  METHOD 1: SUBQUERY  ---------- 
解题思路
METHOD 1 SUBQUERY
SELECT PLAYER_ID, DEVICE_ID
FROM ACTIVITY
WHERE (PLAYER_ID, EVENT_DATE) IN (SELECT PLAYER_ID, MIN(EVENT_DATE)
                                  FROM ACTIVITY
                                  GROUP BY 1);


----------  METHOD 2: a1.id = a2.id  ---------- 
NOTE: a1.id = a2.id 

SELECT player_id, device_id
FROM activity a1
WHERE a1.event_date <= ALL (   #用where找 a1_id = a2_id --> 所有的a1.event_date <= a2.event_date 在a2的table,
	SELECT a2.event_date       # 但因為a2是自己create的 要用subq. select from where 1.id=2.id
	FROM activity a2
	WHERE a1.player_id = a2.player_id
);



----------  METHOD 3: RANK() over (Partition by... ) window function  ---------- 
SELECT PLAYER_ID, DEVICE_ID
FROM (SELECT PLAYER_ID, DEVICE_ID, RANK() OVER(PARTITION BY PLAYER_ID ORDER BY EVENT_DATE) AS `RANK`
      FROM ACTIVITY) AS A
WHERE `RANK` = 1;


                                 
