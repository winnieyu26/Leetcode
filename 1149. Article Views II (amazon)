Table: Views

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| article_id    | int     |
| author_id     | int     |
| viewer_id     | int     |
| view_date     | date    |
+---------------+---------+
There is no primary key for this table, it may have duplicate rows.
Each row of this table indicates that some viewer viewed an article (written by some author) on some date. 
Note that equal author_id and viewer_id indicate the same person.
 

Write an SQL query to find all the people who viewed more than one article on the same date, sorted in ascending order by their id.

The query result format is in the following example:

Views table:
+------------+-----------+-----------+------------+
| article_id | author_id | viewer_id | view_date  |
+------------+-----------+-----------+------------+
| 1          | 3         | 5         | 2019-08-01 |
| 3          | 4         | 5         | 2019-08-01 |
| 1          | 3         | 6         | 2019-08-02 |
| 2          | 7         | 7         | 2019-08-01 |
| 2          | 7         | 6         | 2019-08-02 |
| 4          | 7         | 1         | 2019-07-22 |
| 3          | 4         | 4         | 2019-07-21 |
| 3          | 4         | 4         | 2019-07-21 |
+------------+-----------+-----------+------------+

Result table:
+------+
| id   |
+------+
| 5    |
| 6    |
+------+

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/article-views-ii

# 法１
# Write your MySQL query statement below

SELECT DISTINCT v1.viewer_id as id  # 沒有distinct會: id = 5,5,6,6
FROM Views v1, Views v2
WHERE v1.viewer_id = v2.viewer_id
AND v1.view_date = v2.view_date
AND v1.article_id <> v2.article_id
ORDER BY id				# 記得排序: id = 5,6


# 法２
SELECT DISTINCT viewer_id AS id
from Views 
group by viewer_id, view_date  --> 記得group by view_date
              -- 使用时间来聚合: 这一天有多少人读了多少书，
              -- 加上viewer_id，一个人一天读了多少书
having count(distinct article_id) > 1
order by viewer_id
