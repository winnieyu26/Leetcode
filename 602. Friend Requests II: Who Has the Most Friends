In social network like Facebook or Twitter, people send friend requests and accept others' requests as well.

 

Table request_accepted

+--------------+-------------+------------+
| requester_id | accepter_id | accept_date|
|--------------|-------------|------------|
| 1            | 2           | 2016_06-03 |
| 1            | 3           | 2016-06-08 |
| 2            | 3           | 2016-06-08 |
| 3            | 4           | 2016-06-09 |
+--------------+-------------+------------+
This table holds the data of friend acceptance, while requester_id and accepter_id both are the id of a person.
 

Write a query to find the the people who has most friends and the most friends number under the following rules:

It is guaranteed there is only 1 people having the most friends.
The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.
For the sample data above, the result is:

Result table:
+------+------+
| id   | num  |
|------|------|
| 3    | 3    |
+------+------+
The person with id '3' is a friend of people '1', '2' and '4', so he has 3 friends in total, which is the most number than any others.
Follow-up:
In the real world, multiple people could have the same most number of friends, can you find all these people in this case?


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/friend-requests-ii-who-has-the-most-friends



# Write your MySQL query statement below

-- 把requester_id 和 accepter_id的总排数相加 
# 取 requester_id 跟 accepter_id 連起來 不要刪掉重複的 a+b, b+a都算 但不分加人 還是被加的 id 反正都是人

-- 注意 要用 UNION ALL -用 UNION 会remove duplicate !!
# group by 這些人的id 找最大的 用order by desc limit 1


# 法 1 直接選id當tmp table, 選出裡面的 id, count(全部id)
select id, count(*) num
from 
    (select requester_id as id from request_accepted 
    union all
    select accepter_id as id from request_accepted) tmp 
group by id
order by count(*) desc
limit 1;


# 法 2 選id＋count total總值 當tmp table, 選出裡面的 id ＋ count 剛剛的total
SELECT id, SUM(totalnum) AS num
FROM 
    (SELECT requester_id AS id, COUNT(accepter_id) AS totalnum
    FROM request_accepted
    GROUP BY requester_id
    UNION ALL
    SELECT accepter_id AS id, COUNT(requester_id) AS totalnum
    FROM request_accepted
    GROUP BY accepter_id) t
GROUP BY id
ORDER BY num DESC
LIMIT 1


# ｍｅ 沒有想到用union all, count id 就好
select r1.requester_id as id, count(r2.accept_date) as num
# from request_accepted r1  -- subquery才對
left join request_accepted r2 ON r1.accepter_id = r2.requester_id 
AND r1.accept_date = r2.accept_date
group by r1.requester_id
order by num desc limit 1



