Table: Activity

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key of this table.
This table shows the activity of players of some game.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.
 

Write an SQL query that reports the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.

The query result format is in the following example:

 

Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+

Result table:
+-----------+
| fraction  |
+-----------+
| 0.33      |
+-----------+
Only the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/game-play-analysis-iv


-- at least two consecutive days:  ｄａｙｄｉｆｆ


# 法1
1. id的首登日期 --> 最小的日期 想到min 可以取名叫 login
    --> 1.  GROUP BY 來創 GET LOGIN TABLE;
2. left join，選隔天也登的： player_id 相同 日期差1 --> 是日期的差值 用datediff(event_date, login) = １ 前-後＝1
3.  round(,2) 跟 ＡＶＧ(日期或是id都可以 is not null) as fraction
            或是count(日期或是id)/count(日期或是id) as fraction

# Write your MySQL query statement below
select round(avg(a.event_date is not null), 2) as fraction  --> fraction 算法 是平均
-- OR: round(COUNT(A2.PLAYER_ID) / COUNT(A1.PLAYER_ID), 2)
from 
    (select player_id, min(event_date) as login --> 1. min() to get first LOGIN date;
    from activity 
    group by player_id) a1 --> 2. USE GROUP BY TO GET LOGIN TABLE a1;
left join activity a2 
on a1.player_id=a2.player_id and datediff(a2.event_date, a1.login)=1  --> 2. join on 同個人 日期差1



# 法2: LEAD
WITH t AS
(
    SELECT a.*,
            LEAD(a.event_date,1) OVER W AS edate,
            MIN(event_date) OVER W AS mdate
        FROM Activity a
        WINDOW W AS (PARTITION BY player_id ORDER BY a.event_date)
)
SELECT ROUND
(
    (SELECT COUNT(DISTINCT player_id) 
    FROM t 
    WHERE DATEDIFF(t.edate,t.mdate) = 1)/(SELECT COUNT(DISTINCT player_id) FROM t),2  --> 日期差1. 用datediff()
) AS fraction;





